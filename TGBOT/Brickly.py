#Brickly - –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–∞–π—Ç–æ–≤, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
#—Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã —Å–∞–π—Ç–æ–≤ –±–µ–∑ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
#–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π!

#–≠—Ç–æ –∫–æ–¥ –±–æ—Ç–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —Ä–∞–∑—Ä—à–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–º - –±–µ—Å–ø–ª–∞—Ç–Ω–æ

#FLIPUK DEVELOPER

import telebot
import os

API_TOKEN = ''

bot = telebot.TeleBot(API_TOKEN)

# –ê–π–¥–∏ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
ADMIN_ID = 
ADMIN_ID2 = 

SUBSCRIBERS_FILE = "subs.txt" #–ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
MESSAGE_FILE = 'answers.txt' #–ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –≥–ª–∞–≤–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

def load_subscribers(): #–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    if not os.path.exists(SUBSCRIBERS_FILE):
        return set()
    with open(SUBSCRIBERS_FILE, 'r') as f:
        return set(map(int, f.read().splitlines()))
    
def save_subscribers(subscribers): #–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    with open(SUBSCRIBERS_FILE, 'w') as f:
        for user_id in subscribers:
            f.write(f"{user_id}\n")

def add_subscriber(user_id): #–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    subscribers = load_subscribers()
    if user_id not in subscribers:
        subscribers.add(user_id)
        save_subscribers(subscribers)

def remove_subscriber(user_id): #–£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    subscribers = load_subscribers()
    if user_id in subscribers:
        subscribers.remove(user_id)
        save_subscribers(subscribers)

def get_answer_for_key(key): #–ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    if not os.path.exists(MESSAGE_FILE):
        print(f"File is not found: {MESSAGE_FILE}")
        return None

    try:
        with open(MESSAGE_FILE, 'r', encoding='utf-8') as f:
            content = f.read()

        sections = content.split("##") # –≤ answers.txt –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ## –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è ##

        for section in sections:
            stripped_section = section.strip()
            if not stripped_section:
                continue

            lines = stripped_section.split('\n', 1)
            section_key = lines[0].strip()

            if section_key == key:
                if len(lines) > 1:
                    return lines[1].strip()
                else:
                    return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

        print(f"Key '{key}' is not found in the file.{MESSAGE_FILE}")
        return None

    except Exception as e:
        print(f"Error reading file or parsing contents: {e}")
        return None


#--------------------------------------------------------------
@bot.message_handler(commands=['start']) # –ó–∞–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
def welcome(message):
    user_name = message.from_user.first_name 
    greeting = f"{user_name}"  

    bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Brickly Project, {greeting}! \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Brickly Project –∏ –µ–≥–æ —É—Å–ª—É–≥–∞—Ö.")

    menu(message)

#--------------------------------------------------------------
@bot.message_handler(commands=['menu'])  # –ó–∞–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É /menu
def menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    about = telebot.types.KeyboardButton('üìñ–û –Ω–∞—Åüìñ')
    structure = telebot.types.KeyboardButton('üõ†–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü—Ä–æ–µ–∫—Ç–∞üõ†')
    autors = telebot.types.KeyboardButton('üßë‚Äçüíª–ê–≤—Ç–æ—Ä—ã –ü—Ä–æ–µ–∫—Ç–∞üßë‚Äçüíª')
    social = telebot.types.KeyboardButton('üì±–°–æ—Ü—Å–µ—Ç–∏üì±')
    news = telebot.types.KeyboardButton('üóû–ù–æ–≤–æ—Å—Ç–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏üóû')
    presentation = telebot.types.KeyboardButton('üìä–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—èüìä')
    # donate = telebot.types.KeyboardButton('–î–æ–Ω–∞—Ç')
    markup.add(about, structure, autors, social, news, presentation)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

#--------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == 'üìñ–û –Ω–∞—Åüìñ') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "–û –Ω–∞—Å"
def about(message):
    answer = get_answer_for_key('–û –Ω–∞—Å')
    if answer is not None: 
        bot.send_message(message.chat.id, answer)
    else:
        bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É "–û –Ω–∞—Å" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.')

#--------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == 'üõ†–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü—Ä–æ–µ–∫—Ç–∞üõ†') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "C—Ç—Ä—É–∫—Ç—É—Ä—É –ü—Ä–æ–µ–∫—Ç–∞"
def handle_structure_project_text(message):
    try:
        with open("IMAGES/structure.jpg", "rb") as photo:
            bot.send_photo(message.chat.id, photo)
    except FileNotFoundError:
        print("Structure file not found.")
        bot.send_message(message.chat.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    answer = get_answer_for_key('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Brickly Project')
    if answer is not None:
        bot.send_message(message.chat.id, answer)
    else:
        bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Brickly Project" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏.')

#--------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == 'üßë‚Äçüíª–ê–≤—Ç–æ—Ä—ã –ü—Ä–æ–µ–∫—Ç–∞üßë‚Äçüíª')# –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "–ê–≤—Ç–æ—Ä—ã –ü—Ä–æ–µ–∫—Ç–∞" 
def handle_authors_text(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    flipuk = telebot.types.InlineKeyboardButton('CTO')
    chfr = telebot.types.InlineKeyboardButton('CEO')
    bulka = telebot.types.InlineKeyboardButton('DEV')
    back = telebot.types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è')
    markup.add(flipuk, chfr, bulka, back)
    bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:', reply_markup=markup)

#--------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == 'CTO') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
def handle_flipuk_text(message):

    answer = get_answer_for_key('CTO') 

    flipuk4_image_path = os.path.join(BASE_DIR, "IMAGES", "Flipuk4.png") # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
    try:

        with open(flipuk4_image_path, "rb") as photo:
            bot.send_photo(message.chat.id, photo, caption=answer if answer else None)

    except FileNotFoundError:
        print(f"Photo not found on route: {flipuk4_image_path}")
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        if answer:
             bot.send_message(message.chat.id, answer)

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        if answer:
             bot.send_message(message.chat.id, answer)

    if answer is None and not os.path.exists(flipuk4_image_path):
         bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É "CTO" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç).')

#--------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == 'CEO') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "–î–∏–∑–∞–π–Ω–µ—Ä"
def handle_chfr_text(message):

    answer = get_answer_for_key('CEO')

    CHFR2_image_path = os.path.join(BASE_DIR, "IMAGES", "CHFR2.png") # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
    try:

        with open(CHFR2_image_path, "rb") as photo:
            bot.send_photo(message.chat.id, photo, caption=answer if answer else None)

    except FileNotFoundError:
        print(f"Photo not found on route: {CHFR2_image_path}")
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        if answer:
             bot.send_message(message.chat.id, answer)

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        if answer:
             bot.send_message(message.chat.id, answer)

    if answer is None and not os.path.exists(CHFR2_image_path):
         bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É "CEO" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç).')

#--------------------------------------------------------------

#--------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == 'DEV') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "–î–∏–∑–∞–π–Ω–µ—Ä"
def handle_chfr_text(message):

    answer = get_answer_for_key('FULLSTACK')

    BULKA_image_path = os.path.join(BASE_DIR, "IMAGES", "BULKA.png") # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
    try:

        with open(BULKA_image_path, "rb") as photo:
            bot.send_photo(message.chat.id, photo, caption=answer if answer else None)

    except FileNotFoundError:
        print(f"Photo not found on route: {BULKA_image_path}")
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        if answer:
             bot.send_message(message.chat.id, answer)

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        if answer:
             bot.send_message(message.chat.id, answer)

    if answer is None and not os.path.exists(BULKA_image_path):
         bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É "DEV" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç).')

#--------------------------------------------------------------

@bot.message_handler(func=lambda message: message.text == 'üì±–°–æ—Ü—Å–µ—Ç–∏üì±') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "–°–æ—Ü—Å–µ—Ç–∏"
def handle_chfr_text(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2,resize_keyboard=True)
    tg = telebot.types.KeyboardButton('‚úàÔ∏èTelegram‚úàÔ∏è')
    ig = telebot.types.KeyboardButton('üì∏Instagramüì∏')
    gt = telebot.types.KeyboardButton('üò∫Githubüò∫')
    mail = telebot.types.KeyboardButton('üì™Mailüì™')
    site = telebot.types.KeyboardButton('üñ•Ô∏è–ù–∞—à –°–∞–π—Çüñ•Ô∏è')
    back = telebot.types.KeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è')
    markup.add(tg, ig, gt, mail, site, back)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü—Å–µ—Ç–∏:', reply_markup=markup)
#--------------------------------------------------------------

#--------------------------------------------------------------

@bot.message_handler(func=lambda message: message.text == '‚úàÔ∏èTelegram‚úàÔ∏è') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "Telegram"
def handle_flipuk_text(message): 

    telegram_image_path = os.path.join(BASE_DIR, "IMAGES", "telegram.jpg") # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        markup = telebot.types.InlineKeyboardMarkup()
        button = telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://t.me/bricklyproject")  
        markup.add(button)

        with open(telegram_image_path, "rb") as photo:
            bot.send_photo(
                message.chat.id, 
                photo,
                reply_markup=markup
            )

    except FileNotFoundError:
        print(f"Photo not found on route: {telegram_image_path}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        markup = telebot.types.InlineKeyboardMarkup()
        button = telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://t.me/bricklyproject")
        markup.add(button)
        
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=markup)
       
@bot.message_handler(func=lambda message: message.text == 'üì∏Instagramüì∏') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "Instagram"
def handle_flipuk_text(message): 

    instagram_image_path = os.path.join(BASE_DIR, "IMAGES", "instagram.jpg") # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        markup = telebot.types.InlineKeyboardMarkup()
        button = telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://www.instagram.com/brickly.project?igsh=ajk1Z3Ixemp2dzg1")  
        markup.add(button)

        with open(instagram_image_path, "rb") as photo:
            bot.send_photo(
                message.chat.id, 
                photo,
                reply_markup=markup
            )

    except FileNotFoundError:
        print(f"Photo not found on route: {instagram_image_path}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        markup = telebot.types.InlineKeyboardMarkup()
        button = telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://www.instagram.com/brickly.project?igsh=ajk1Z3Ixemp2dzg1")
        markup.add(button)
        
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üò∫Githubüò∫') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "GitHub"
def handle_flipuk_text(message): 

    github_image_path = os.path.join(BASE_DIR, "IMAGES", "github.jpg") # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        markup = telebot.types.InlineKeyboardMarkup()
        button = telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://github.com/LeoNchiC/BricklyProject/tree/main")  
        markup.add(button)

        with open(github_image_path, "rb") as photo:
            bot.send_photo(
                message.chat.id, 
                photo,
                reply_markup=markup
            )

    except FileNotFoundError:
        print(f"Photo not found on route: {github_image_path}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        markup = telebot.types.InlineKeyboardMarkup()
        button = telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://github.com/LeoNchiC/BricklyProject/tree/main")
        markup.add(button)
        
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üì™Mailüì™') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "Mail"
def handle_flipuk_text(message):

    answer = get_answer_for_key('–ú—ã–ª–æ') 

    mail_image_path = os.path.join(BASE_DIR, "IMAGES", "mail.jpg") # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
    try:

        with open(mail_image_path, "rb") as photo:
            bot.send_photo(message.chat.id, photo, caption=answer if answer else None)

    except FileNotFoundError:
        print(f"Photo not found on route: {mail_image_path}")
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        if answer:
             bot.send_message(message.chat.id, answer)

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        if answer:
             bot.send_message(message.chat.id, answer)

    if answer is None and not os.path.exists(mail_image_path):
         bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É "üì™Mailüì™" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.(—Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç).')


@bot.message_handler(func=lambda message: message.text == 'üñ•Ô∏è–ù–∞—à –°–∞–π—Çüñ•Ô∏è') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "–ù–∞—à —Å–∞–π—Ç"
def handle_flipuk_text(message): 

    site_image_path = os.path.join(BASE_DIR, "IMAGES", "site.jpg") # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        markup = telebot.types.InlineKeyboardMarkup()
        button = telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://brickly.by/")  
        markup.add(button)

        with open(site_image_path, "rb") as photo:
            bot.send_photo(
                message.chat.id, 
                photo,
                reply_markup=markup
            )

    except FileNotFoundError:
        print(f"Photo not found on route: {site_image_path}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        markup = telebot.types.InlineKeyboardMarkup()
        button = telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url="https://brickly.by/")
        markup.add(button)
        
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=markup)


        
#--------------------------------------------------------------

#--------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == 'üóû–ù–æ–≤–æ—Å—Ç–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏üóû') # –ó–∞–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ "–†–∞—Å—Å—ã–ª–∫–∏"
def news(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2,resize_keyboard=True)
    sb = telebot.types.KeyboardButton('‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É‚úÖ')
    unsb = telebot.types.KeyboardButton('‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è —Å —Ä–∞—Å—Å—ã–ª–∫–∏‚ùå')
    back = telebot.types.KeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è')
    markup.add(sb, unsb, back)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
#--------------------------------------------------------------

#--------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == '‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É‚úÖ') # –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
def subscribe(message):
    add_subscriber(message.chat.id)
    bot.send_message(message.chat.id, '‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!')

@bot.message_handler(func=lambda message: message.text == '‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è —Å —Ä–∞—Å—Å—ã–ª–∫–∏‚ùå') # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
def unsubscribe(message):
    remove_subscriber(message.chat.id)
    bot.send_message(message.chat.id, '‚ùå–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å —Å —Ä–∞—Å—Å—ã–ª–∫–∏!')

@bot.message_handler(commands=['send']) # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è(–¥–ª—è –ê–¥–º–∏–Ω–æ–≤)
def send_news(message):
    if message.from_user.id != ADMIN_ID and message.from_user.id != ADMIN_ID2:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    text = message.text.partition(' ')[2].strip()
    if not text:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /send.")
        return
#--------------------------------------------------------------
    
    subscribers = load_subscribers()
    success = 0 
    fail = 0

    for user_id in subscribers:
        try:
            bot.send_message(user_id, f"üì∞ {text}")
            success += 1
        except:
            fail += 1

    bot.send_message(message.chat.id, f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success}, –æ—à–∏–±–æ–∫: {fail}")
    
#--------------------------------------------------------------
user_image_index = {} 


image_paths = [ # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤–∞—à–µ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    'slides/1.png',
    'slides/2.png',
    'slides/3.png',
    'slides/4.png',
    'slides/5.png',
    'slides/6.png',
    'slides/7.png',
    'slides/8.png',
    'slides/9.png',
    'slides/10.png'
]

user_image_index = {}
#--------------------------------------------------------------

#--------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == "üìä–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—èüìä")# –ó–∞–¥–∞—ë–º –æ—Ç–≤–µ—Ç –Ω–∞ "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"
def press(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2,resize_keyboard=True)
    look = telebot.types.KeyboardButton("üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—éüëÄ")
    download = telebot.types.KeyboardButton("üì≤–°–∫–∞—á–∞—Ç—å –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—éüì≤")
    back = telebot.types.KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è")
    markup.add(look, download, back)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
#--------------------------------------------------------------

#--------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == "üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—éüëÄ")# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
def send_first_image(message):
    chat_id = message.chat.id
    user_image_index[chat_id] = 0
    with open(image_paths[0], 'rb') as photo:
        markup = telebot.types.InlineKeyboardMarkup()
        next_button = telebot.types.InlineKeyboardButton("‚û°Ô∏è", callback_data='next')
        markup.add(next_button)
        bot.send_photo(chat_id, photo, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'next' or call.data == 'prev')
def navigate_images(call):
    chat_id = call.message.chat.id
    current_index = user_image_index.get(chat_id, 0)

    if call.data == 'next':
        new_index = current_index + 1
    else:
        new_index = current_index - 1

    if 0 <= new_index < len(image_paths):
        user_image_index[chat_id] = new_index
        with open(image_paths[new_index], 'rb') as photo:
            markup = telebot.types.InlineKeyboardMarkup()
            buttons = []
            if new_index > 0:
                buttons.append(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='prev')) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
            if new_index < len(image_paths) - 1:
                buttons.append(telebot.types.InlineKeyboardButton("‚û°Ô∏è", callback_data='next')) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–≤–ø–µ—Ä—ë–¥"
            markup.add(*buttons)
            bot.edit_message_media(telebot.types.InputMediaPhoto(photo), chat_id=chat_id, message_id=call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id)
    else:
        bot.answer_callback_query(call.id, "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è/–ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞!")

@bot.message_handler(func=lambda message: message.text == "üì≤–°–∫–∞—á–∞—Ç—å –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—éüì≤") # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
def send_first_image(message):
    chat_id = message.chat.id

    try:
        with open('slides/BricklyPresentation.pdf', 'rb') as document:
            bot.send_document(chat_id, document)
        print("The document has been sent successfully.")
    except FileNotFoundError:
        bot.send_message(chat_id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")

#--------------------------------------------------------------

#--------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥‚¨ÖÔ∏è') # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
def handle_back_button(message):
    menu(message)
#--------------------------------------------------------------


@bot.message_handler(func=lambda message: True)
def fallback_handler(message):
    bot.send_message(message.chat.id, "–æ –∫–∞–∫")


bot.polling()


